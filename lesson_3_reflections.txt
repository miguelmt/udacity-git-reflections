Q: When would you want to use a remote repository rather than keeping all your work
local?

A: When working with other people on the same codebase, but also for backup
purposes (you know the 3-2-1 rule: 3 backups, 2 different kinds of media,
1 offsite; well, the one in GitHub is the offsite one).


Q: Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A: Same reason as why I would like to have manual commits: control. The moment
something is in GitHub, it is there for your colleagues to see... and you may
not want that to happen; you might want to wait until you have something
worth showing... or something that works.


Q: Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

A: Forks: to get your own copy of somebody else's repository while giving (some
amount of) credit and keeping some kind of link to the original repository.
Apparently, this link makes it easier to suggest changes to the original repo,
should you want to do so.
Clones: you get your own copy of somebody else's repository. There is a strong
link between the original and the clone, as the original is (at least by default)
the origin of the clone, which makes a clone the best way to collaborate...
but you may not have premission to collaboarate.
Branches: this is actually working on the same repository where the owner of
the original codebase works and (I guess) being able to push stuff as if it
were yours. This requires a high level of trust and coordination, the kind of
coordination that you can (only?) get among members of the same team.


Q: What is the benefit of having a copy of the last known state of the remote
stored locally?

A: 


Q: How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

A: 


Q: When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

A: 
